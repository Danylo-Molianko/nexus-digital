// ==========================================
// ERROR HANDLING MIDDLEWARE
// ==========================================

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
const logError = (error, req) => {
    const timestamp = new Date().toISOString();
    const logMessage = `
[${timestamp}] ERROR:
URL: ${req.method} ${req.originalUrl}
User-Agent: ${req.get('User-Agent') || 'Unknown'}
IP: ${req.ip}
Error: ${error.message}
Stack: ${error.stack}
---
`;
    
    const logPath = path.join(__dirname, '../logs', 'error.log');
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ logs —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    const logDir = path.dirname(logPath);
    if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
    }
    
    fs.appendFile(logPath, logMessage, (err) => {
        if (err) console.error('‚ùå Logging error:', err);
    });
};

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ 404 –ø–æ–º–∏–ª–æ–∫
const notFoundHandler = (req, res, next) => {
    // –Ø–∫—â–æ —Ü–µ API –∑–∞–ø–∏—Ç
    if (req.originalUrl.startsWith('/api/')) {
        return res.status(404).json({
            success: false,
            error: 'API endpoint –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
            code: 'NOT_FOUND'
        });
    }
    
    // –î–ª—è SPA - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ index.html
    res.sendFile(path.join(__dirname, '../public/index.html'));
};

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
const errorHandler = (error, req, res, next) => {
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    console.error('‚ùå Server Error:', error);
    logError(error, req);
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ HTTP –ø–æ–º–∏–ª–∫–∏
    let statusCode = error.statusCode || error.status || 500;
    let message = error.message || '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    
    // –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫
    if (error.name === 'ValidationError') {
        statusCode = 400;
        message = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏';
    } else if (error.name === 'CastError') {
        statusCode = 400;
        message = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID';
    } else if (error.code === 11000) {
        statusCode = 409;
        message = '–î–∞–Ω—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å';
    } else if (error.name === 'JsonWebTokenError') {
        statusCode = 401;
        message = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó';
    } else if (error.name === 'TokenExpiredError') {
        statusCode = 401;
        message = '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π';
    }
    
    // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–æ–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ
    if (process.env.NODE_ENV === 'production' && statusCode === 500) {
        message = '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.';
    }
    
    // –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤
    if (req.originalUrl.startsWith('/api/')) {
        return res.status(statusCode).json({
            success: false,
            error: message,
            ...(process.env.NODE_ENV === 'development' && { 
                stack: error.stack,
                details: error 
            })
        });
    }
    
    // –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
    res.redirect('/');
};

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
const requestLogger = (req, res, next) => {
    const timestamp = new Date().toISOString();
    const method = req.method;
    const url = req.originalUrl;
    const userAgent = req.get('User-Agent') || 'Unknown';
    const ip = req.ip;
    
    console.log(`üìù [${timestamp}] ${method} ${url} - ${ip} - ${userAgent}`);
    
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ —Ñ–∞–π–ª (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ)
    if (process.env.NODE_ENV === 'production') {
        const logMessage = `[${timestamp}] ${method} ${url} - ${ip} - ${userAgent}\n`;
        const logPath = path.join(__dirname, '../logs', 'access.log');
        
        fs.appendFile(logPath, logMessage, (err) => {
            if (err) console.error('‚ùå Access logging error:', err);
        });
    }
    
    next();
};

module.exports = {
    notFoundHandler,
    errorHandler,
    requestLogger
};